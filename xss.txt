1.a. Immediately  on opening the site, I only see 1 cookie, with the name theme and a value of "default" for css338.jeffondich.com/. 

1.b. When I switched the Theme to Blue, the cookie's value changed to "blue" as well. Additionally, the time created, expiration time, and last accessed time all were replaced with new values.

1.c. Inspecting sends a GET request which includes a header that sends the coookie Theme="default". I can also edit the cookie before I send it, to change colors that way. The reponse to changing cookies is a Set-Cookie header which is followed up with the coookie's name=new value for the cookie and then all the metadata with it. Same as the inspector, except the times are all different of course. There's also a Vary: Cookie header which is probably just saying the cookie has changed.

1.d. My theme from specifically the normal browser (not burpsuite's) is still the same. Hooray!

1.e. When the browser sends a GET request, it includes a header that sends the cookie associated with the site, in this case the theme=blue cookie. That tells the server to use the blue theme.

1.f. When I request to change themes, the browser sends a GET request for the page again this time including a ?theme=blue in the file path. When the server responds, it sends back the site information with an additional Set-Cookie header which includes the cookie's new value and all the updated metadata.

1.g. Triple clicking on the value area for the cookie let me set its value to red, and then refreshing the page gave me the red theme.

1.h. Inspecting sends a GET request which includes a header that sends the coookie Theme="default". I can also edit the cookie before I send it, to change the value of the theme cookie to red.

1.i. I was using Kali, so from my root directory into /.mozilla/firefox/at1bi6gy.default-esr there are some files with the name cookie. (cookies.sqlite and cookies.sqlite-wal). cookies.qslite is a SQLite database, wall cookies.sqlite-wal is empty.

2.a. Moriarty creates an account with the forum first, and then creates a post as normal. As part of that post, he includes some html or javascript to get the display service to alter its normal behavior.
When you open up Moriarty's second post, the browser sends a GET request to the server. As it loads the document and dsiplays everything up to the alert in his second post, it throws up the alert. Only once the alert is clicked away does it finish rendering the rest of the page.

2.b. You can use javascript to redirect the page anywhere you want, which happens frequently on bad sites: an advertiser redirects you fourty times or however many to some other webpage, so going back is annoying (can't just click the back arrow one, have to open up history and find the page) but in this constant redirection your attention is completely diverted, and if something else malicious is going on you probably won't notice.

2.c. The browser records the logged in account whenever it communicates with the server, cross-site scripting would let you steal that information and try it against other sites to see if it matches with anything more valuable than a forum (though you can still use someone else's forum account for bad things too).

2.d. Firstly, don't let people enter scripts in! I think there's only one way to enter javascript in <script> script goes here </script>, so block that. Secondly, have the browser only send the hashed username and password and keep communications encrypted (so update the forum to use https instead). Just following best practices would prevent that issue. Another thing to do would be to screen all posts someone makes before publishing them onto the site, and have professionals make sure they are safe (and can also make sure they follow the forum rules).
