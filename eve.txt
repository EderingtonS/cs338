Sam "Eve" Ederington

Diffie Hellman
g=7, p=97, A=53, B=82
g=7 shared secret is therefore between 0 and 7        (really small, bigger number would make this harder).
82**X%97 = 53**Y%7
Y = 2, X = 14, Shared Secret = 2  (brute force trying numbers until they lined up, wouldn't work well with bigger numbers).

RSA
e=13, n=162991
message: [17645, 100861, 96754, 160977, 120780, 90338, 130962, 74096, 128123, 25052, 119569, 39404, 6697, 82550, 126667, 151824, 80067, 75272, 72641, 43884, 5579, 29857, 33449, 46274, 59283, 109287, 22623, 84902, 6161, 109039, 75094, 56614, 13649, 120780, 133707, 66992, 128221]

key: y**d%162991 where y is the char of the message
e*d% lambda(n)=1
lambda(n) = lcm(p, q)
p*q = n where p and q are prime

p and q are 419 and 389    (162991/prime number from wikipedia list, brute forced it starting at 673 and going down the list for some reason instead of starting somewhere in mid 400s. Bigger numbers would make this really hard, and the following also much harder).
lcm of 418 and 388 is 81092 = lambda(n)      (math.lcm(418, 388))
13*d%81092=1 so d is 43665          (made a list, ran (81092*i+1)/13 through it and picked the first one that gave an int).

key: y**43665%162991          looping that through the message gives us
17509 24946 8258 28514 11296 25448 25955 27424 29800 26995 8303 30068 11808 26740 29808 29498 12079 30583 30510 29557 29302 25961 27756 24942 25445 30561 29795 26670 26991 12064 21349 25888 31073 11296 16748 26979 25902

Which can be changed into hexidecimal then split in half and translated to ascii. I just did it by looking off a table.
'0x4465' '0x6172' '0x2042' '0x6f62' '0x2c20' '0x6368' '0x6563' '0x6b20' '0x7468' '0x6973' '0x206f' '0x7574' '0x2e20' '0x6874' '0x7470' '0x733a' '0x2f2f' '0x7777' '0x772e' '0x7375' '0x7276' '0x6569' '0x6c6c' '0x616e' '0x6365' '0x7761' '0x7463' '0x682e' '0x696f' '0x2f20' '0x5365' '0x6520' '0x7961' '0x2c20' '0x416c' '0x6963' '0x652e'
Dear Bob, check this out. https://www.surveillancewatch.io/ sea ya, Alice.

The encoding works taking the message in English, turning it into hexadecimal encoded ascii and combining two adjacent characters together, and then performing the encryption on it. Alice would apply Bob's public key to the message and send it off to Bob. Bob would then have to decrypt it with his secret key, giving him plaintext numbers, which Bob would have to turn into hexadecimal and then go through turning the hexidecimal encoding back into ascii plaintext.

Even with the larger numbers, the character based encoding system is vulnerable because if you can predict common letters you might be able to decrypt it, or if you know alice is going to start it with 'Dear Bob,' or end it with 'Alice.', then you can try to figure the code out from that. An encryption that deals with either larger blocks or something different than individual characters is going to do better.
